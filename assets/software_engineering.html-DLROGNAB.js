import{_ as e,e as i,f as o,o as c}from"./app-CSdVOvyk.js";const d={};function u(a,l){return c(),i("div",null,l[0]||(l[0]=[o('<h1 id="软件工程" tabindex="-1"><a class="header-anchor" href="#软件工程"><span>软件工程</span></a></h1><h2 id="软件工程的概念" tabindex="-1"><a class="header-anchor" href="#软件工程的概念"><span>软件工程的概念</span></a></h2><ul><li>软件工程是随着时间推移的编程<code>时间</code><ul><li>代码的预期生命周期是多少</li><li>海勒姆定律<code>你的API并不总是会以你认为的方式工作,随着生命的延长，会暴露出预期外的背景</code></li></ul></li><li>规模和效率<code>可扩展与可持续</code><ul><li>工程师的工作量是否随着组织的规模而增长<code>合并分支/主干，产生问题时，规模和不可持续就在上升</code></li><li>对基础架构团队进行持续集成（CI）测试</li></ul></li><li>成本<code>正确的决策</code><ul><li>当决策是错误的时候，要有明确的改进路径，但目标是共识，而不是一致</li><li>推荐进行基于数据的决策</li></ul></li></ul><blockquote><p>整理：软件工程在形式上是：对方案进行决策。（在对重要的概念理解之后）。比方说：解决问题的办法不只一种，当然有好有坏，但不存在最优的情况，这是编程。随着时间的推移，会出现意料外的情况。随着时间的推移，规模在不断增加，带来的是效率问题，意味着能否继续的问题。</p></blockquote><h2 id="团队" tabindex="-1"><a class="header-anchor" href="#团队"><span>团队</span></a></h2><ul><li>程序员的一般行为 <ul><li>隐藏我的代码<code>缺乏安全感,害怕别人看到和评价</code></li><li>希望被视为天才<code>编程是智力行为，但大多数情况下并不是天才行为。更糟糕的是，你可能会发现自己只解决了分析性问题，而没有解决人的问题</code></li><li>隐藏不利 <ul><li>增加了不必要失败的风险<code>必须权衡协作和审查的价值</code></li><li>巴士因子<code>团队里因巴士撞倒的多少人，会导致项目失败</code></li><li>进度<code>尽早获得反馈，尽早进行测试，尽早考虑安全和生产环境</code></li><li>私人办公室<code>你更应该担心浪费大量时间在错误的事情上</code></li></ul></li></ul></li></ul><blockquote><p>通过观察影响团队合作的个人的一般行为，进行利弊的分析，以及行为的建议。主题与共享信息相关，包括进度、技术力，成果，日常的讨论</p></blockquote><ul><li>团队合作<code>关系总是比项目更长久</code><ul><li>团队成员的性格特点<code>谦逊,尊重,信任，建立一种团队成就感和团体自豪感</code></li><li>给出和接受批评<code>确保你和对方理解建设性批评和对某人的人身攻击不同</code></li><li>失败与事后总结<code> 概述、时间线(发现、调查、解决)、原因、影响和损害，解决方法</code></li></ul></li></ul><blockquote><p>团队合作中的基础要素，团队给人的印象的角度，以及破坏团队合作因素中常见的情况（挫折，矛盾与争吵）</p></blockquote><h2 id="知识共享" tabindex="-1"><a class="header-anchor" href="#知识共享"><span>知识共享</span></a></h2><blockquote><p>一个组织需要学习的文化(环境、氛围)，知识共享本身存在着许多的困难：一般通信过程的困难，以及因为专业化知识本身，而存在的沟通问题</p></blockquote><ul><li><p>具有安全感的提问环境</p><ul><li>导师制<code>帮助新人从向一群陌生人提问恐惧中解脱</code></li><li>合作性的提问与解答</li></ul></li><li><p>增长个人的知识</p><ul><li>提问<code>不要落入在向别人寻求帮助之前更努力地一下的陷阱</code></li><li>了解背景<code>对现有事物的设计和实施背后的决策的理解</code></li></ul></li><li><p>将问题扩散</p><ul><li>社区提问</li><li>群聊</li><li>问答平台<code>Stack Overflow</code></li></ul></li><li><p>将知识扩散<code>教学</code></p><ul><li>在固定的时间讨论问题<code>问题很模糊的时候有用</code></li><li>技术讲座<code>主题复杂、稳定、能够提供教师的个性化帮助</code></li><li>文档</li><li>代码</li></ul></li><li><p>组织的知识的扩展</p><ul><li>组织的文化</li><li>奖励和认可</li><li>建立规范的信息源</li></ul></li><li><p>代码审查</p></li></ul><blockquote><p>作者聊了一些知识共享的问题，清楚明了。但是执行起来真的如此么？ 知识的共享对于使组织在面对变化时具有弹性和冗余至关重要。 但是老板在乎么？老板在乎订单，员工在乎么？你在乎有什么用。 用同事的话说：你出方案，老板审核。审核不过，你再出，如此这般 但是你也要努力的去做</p></blockquote><h2 id="领导团队" tabindex="-1"><a class="header-anchor" href="#领导团队"><span>领导团队</span></a></h2><blockquote><p>软件团队中，团队领导通常担任的角色：技术领导和项目领导。差不多像一个管人员、一个管项目具体的任务，或者both。 我的经历来看，像Pm和Tl（公司里就这么叫的）。 Pm管时间，部门之间的沟通，跟客户发邮件、测试安排，人员调动（找领导要人）。 TL让你做这个做那个，什么bug，解决的怎么样 感觉PM的权力更大一些，因为PM组织开会，TL总是要去</p></blockquote><ul><li><p>角色转变：从个人到领导<code>鼓励你主动成为leader，摆出一些常见的拒绝理由</code></p><ul><li>转型时价值标准发生变化<code>需要更换衡量标准</code><ul><li>团队可以写出更多的代码，实现更多的功能</li><li>团队的高效和快乐</li></ul></li><li>无法胜任领导职位？<code>职位通常是无法胜任的人占据的</code></li><li>经理病<code>微观管理（事必躬亲）、忽视低绩效员工，以及使用推卸责任者。要抵制管人的冲动</code></li></ul></li><li><p>领导风格<code>管理 还是 服务</code></p><ul><li>胡萝卜和大棒？<code>胡萝卜激励、棍子来鞭打</code></li><li>信任，施展积极的压力</li></ul></li><li><p>糟糕的情况</p><ul><li>雇佣菜鸟<code>你获得了安全感，也获得了更多需要自己做的事，同时错失了成长和学习的机会</code></li><li>忽视低绩效员工<code>尽快处理低绩效员工，帮助提升或退出</code></li><li>忽视人的问题<code>成员有生活，有具体的困难。效率不高并不总是能力、懒惰问题</code></li><li>老好人<code>同时具有人际和职场关系，控制好很困难</code></li><li>对招聘妥协<code>找合适的人，而不是从所有的面试里去挑</code></li><li>视作孩子或囚犯<code>要信任</code></li></ul></li><li><p>积极的情况</p><ul><li>丢掉自负<code>不进行微观管理、推动团队达成共识</code></li><li>管好自己<code>少说些怀疑的话，保持冷静，帮助解决问题（不是直接下场解决问题）</code></li><li>成为催化剂<code>建立共识，在正确的方向上推动</code></li><li>消除障碍<code>了解答案在哪里，了解正确的人</code></li><li>成为导师<code>三要素：经验知识、能解释清楚问题、衡量对方需要多少程度的帮助</code></li><li>指定明确的目标<code>任务的称述、优先级衡量优先级</code></li><li>以诚待人<code>清晰的反馈和指导</code></li><li>追踪幸福感<code>关注成员的福利，得到认可，对工作满意，询问需求</code></li><li>意想不到的问题<code>将隐含的目标(晋升、学习新东西、推出重要的东西、与聪明人一起工作)明确化,让你的团队知道你在考虑这个问题</code></li></ul></li></ul><blockquote><p>这里聊了一些对领导的看法。但只是一些建议，可以更优化些。如何能变成一个递进或者技能树之类的方法？</p></blockquote><h2 id="规模" tabindex="-1"><a class="header-anchor" href="#规模"><span>规模</span></a></h2><blockquote><p>介绍了随着规模扩大带来的问题以及可能的应对方法。主要内容是：如何在扩大给规模的同时，保持决策的能力；规模扩大的任务安排问题；以及扩大规模本身</p></blockquote><ul><li><p>决策</p><ul><li>权衡<code>在解决方案上反复的决定并迭代</code></li><li>找到盲点<code>出现未知的问题，通常解决方法在认知之外</code></li><li>分析的边界<code>在完美的决策和迅速的决策找到权衡</code></li></ul></li><li><p>保持离开<code>引导组织自己解决问题</code></p><ul><li>划分问题责任<code>动态的调整团队规模</code></li><li>授权<code>什么事情是非你不可的</code></li><li>倾听<code>倾听客户，调整方向</code></li><li>团队定位<code>团队是负责问题、方案或是产品？生命周期是不同的</code></li></ul></li><li><p>扩张</p><ul><li>一个途径<code>分析、挣扎、前进、奖励（奖励更多的任务，从而造成人员的需求而扩大规模)</code></li><li>重要和紧急<code>被动响应的工作模式会占据主动，但是要强迫自己花更多的精力在重要的事情上</code><ul><li>委托：把紧急的事情委托给你组织的领导</li><li>安排专注的时间</li><li>找到一个有效的进度跟踪系统</li></ul></li><li>丢弃<code>适当丢弃没有给予重要属性任务，这就是说：紧急、无所谓的事情都是可以不用做的</code></li><li>保护精力<code>如何保持充电和乐观</code><ul><li>放个真正的假期<code>完全切割工作</code></li><li>工作节奏<code>工作中间的休息，出去走一走</code></li><li>释放不稳定的情绪</li></ul></li></ul></li></ul><blockquote><p>规模成为问题本身即扩大规模。只考虑了如何扩大规模。合理么？不知道</p></blockquote><h2 id="效率" tabindex="-1"><a class="header-anchor" href="#效率"><span>效率</span></a></h2><blockquote><p>规模增大，随之而来的是成本的增加。成本会限制规模的扩大，应对方法是调高效率和改进过程</p></blockquote><ul><li><p>是否需要度量<code>以具体问题的形式描述他们想要度量的东西</code></p><ul><li>你期望的结果是什么？原因是什么<code>成本是否值得，</code></li><li>会采取什么行动</li><li>如果度量的结果是负面的？是否要处理</li><li>谁对结果负责</li></ul></li><li><p>如何度量<code>使用目标和信号</code></p><ul><li>目标<code>结果，注意目标的权衡合理</code></li><li>信号<code>判断是否得到结果</code></li><li>指标<code>信号的具体项，作为度量有效的关键</code></li></ul></li><li><p>使用数据验证指标</p></li></ul><blockquote><p>这章看的不明白，类似于定KPI吧，只是多了意识形态部分的论述。再后面就是组织级别的了：代码审查、测试、构建系统。我个人大概率是用不到，以后再说吧。另外，这个翻译读起来是真的难受。我再看看，本科里的软件工程是什么</p></blockquote>',25)]))}const p=e(d,[["render",u],["__file","software_engineering.html.vue"]]),n=JSON.parse('{"path":"/posts/CS/software_engineering.html","title":"软件工程","lang":"zh-CN","frontmatter":{"date":"2025-02-16T00:00:00.000Z","category":["CS"],"tag":["软件工程"],"excerpt":"<p> 计算机说到底是个工科项目，要如何管理你的项目？ </p>"},"headers":[{"level":2,"title":"软件工程的概念","slug":"软件工程的概念","link":"#软件工程的概念","children":[]},{"level":2,"title":"团队","slug":"团队","link":"#团队","children":[]},{"level":2,"title":"知识共享","slug":"知识共享","link":"#知识共享","children":[]},{"level":2,"title":"领导团队","slug":"领导团队","link":"#领导团队","children":[]},{"level":2,"title":"规模","slug":"规模","link":"#规模","children":[]},{"level":2,"title":"效率","slug":"效率","link":"#效率","children":[]}],"git":{"updatedTime":1740843685000,"contributors":[{"name":"loker","username":"loker","email":"blemmyes@foxmail.com","commits":3,"url":"https://github.com/loker"}]},"filePathRelative":"posts/CS/software_engineering.md"}');export{p as comp,n as data};
